<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dtrace on 湖间小筑</title>
    <link>http://hzmangel.github.io/tags/dtrace/</link>
    <description>Recent content in Dtrace on 湖间小筑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright - ©2015 - hzmangel</copyright>
    <lastBuildDate>Thu, 24 May 2012 09:25:42 +0000</lastBuildDate>
    <atom:link href="http://hzmangel.github.io/tags/dtrace/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tunning Rails with DTrace</title>
      <link>http://hzmangel.github.io/post/1147/</link>
      <pubDate>Thu, 24 May 2012 09:25:42 +0000</pubDate>
      
      <guid>http://hzmangel.github.io/post/1147/</guid>
      <description>

&lt;p&gt;This post will talk about how to do performance test of Rails program with
DTrace tool. The testing will be separated into Ruby program part and database
operations part. Please make sure all the tested program has provided probes
to the DTrace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: The testing data is still under collection, this post has only DTrace script now, I will update this post after gathering enough testing data.## DTrace&lt;/p&gt;

&lt;p&gt;DTrace is a dynamic tracing tool, which is safe to use in production systems
and it does not require restarting either the system or application. DTrace
consists of 4 parts: front-end, libdtrace library, in-kernel DTrace framework
and DTrace provider.&lt;/p&gt;

&lt;p&gt;DTrace is built on a foundation of objects called probes. Probes are event
handlers that will be triggered when their particular event occurs, and DTrace
can bind some actions to the probe to get needed information.&lt;/p&gt;

&lt;h3 id=&#34;basic-syntax&#34;&gt;Basic syntax&lt;/h3&gt;

&lt;p&gt;A typically D language script contains three sections, the &lt;code&gt;BEGIN&lt;/code&gt; section,
&lt;code&gt;END&lt;/code&gt; section and probe section. Sections are surrounded by braces. Each probe
description is made of four fields, separated by colon character:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provider:module:function:name
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;privider&lt;/code&gt;: Instrumented layer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;module&lt;/code&gt;: Instrumented module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;: Instrumented function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: location in the function, typically is enter, return, tick-nsec&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The provider field is needed, which others are optional. Pattern matching
characters such as *, ?, […] and \ can be used. For example, this script will
get all call of &lt;code&gt;write*&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syscall::write*:entry
{
    printf(&amp;quot;(%d): %s write call called&amp;quot;, pid, execname);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a sample script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/sbin/dtrace -s

#pragma D option quiet

pid$target::fopen*:entry
{
    printf(&amp;quot;(%d):%s open\n&amp;quot;, pid, execname);
}

pid$target::fwrite*:entry
{
    printf(&amp;quot;(%d):%s write\n&amp;quot;, pid, execname);
}

pid$target::fread*:entry
{
    printf(&amp;quot;(%d):%s read\n&amp;quot;, pid, execname);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is a testing C program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char* argv[]) {
    char buffer[64];
    int size = 0;

    FILE *fp = fopen(&amp;quot;bar.c&amp;quot;, &amp;quot;r&amp;quot;);
    fread(buffer, sizeof(buffer), sizeof(char), fp);
    fclose(fp);

    FILE *fp2 = fopen(&amp;quot;/tmp/foobar&amp;quot;, &amp;quot;w&amp;quot;);
    fwrite(buffer, sizeof(buffer), sizeof(char), fp2);
    fclose(fp2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the result of running the program with given script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ./foo.d -c `pwd`/bar
(3001):bar open
(3001):bar read
(3001):bar open
(3001):bar write
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It also can support some predication before the action, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ pid == 12345 /
/ execname == &amp;quot;bash&amp;quot; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, please refer to reference section:&lt;/p&gt;

&lt;h2 id=&#34;rails&#34;&gt;Rails&lt;/h2&gt;

&lt;h3 id=&#34;probes-for-ruby-and-rails-application&#34;&gt;Probes for Ruby and Rails application&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: Make sure the Ruby you are using provides the DTrace probes, or the testing below can &lt;strong&gt;NOT&lt;/strong&gt; be continued.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: The Ruby 1.9.3 currently do not support DTrace, please follow this discussion for more information &lt;a href=&#34;http://bugs.ruby-lang.org/issues/2565&#34;&gt;http://bugs.ruby-lang.org/issues/2565&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have applied the patch mentioned above to Ruby 1.9.3 and regenerate the
&lt;code&gt;configure&lt;/code&gt; file with &lt;code&gt;autoconf&lt;/code&gt; command, then compile the binary and install
it to replace the Ruby installed by &lt;em&gt;homebrew&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Probes provided by Ruby is list below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function-entry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function-return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gc-begin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gc-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object-create-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object-create-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object-free&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;raise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rescue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby-probe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list can be get by this command: &lt;code&gt;sudo dtrace -lP &#39;ruby*&#39;&lt;/code&gt;. The &lt;code&gt;-P&lt;/code&gt;
argument is used to specify the provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: The probe name may different than above list in different system, please refer to the output of command while writing the script.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;function*&lt;/code&gt;, &lt;code&gt;object*&lt;/code&gt; and &lt;code&gt;gc*&lt;/code&gt; probes can be used to analyse performance
while the &lt;code&gt;raise&lt;/code&gt; and &lt;code&gt;rescue&lt;/code&gt; can be used to analyse error. Since the probes
for Ruby my have some errors while running on my system, so I only choose
&lt;code&gt;function&lt;/code&gt; related probes in the script, and a summary will be printed out
after test completed.&lt;/p&gt;

&lt;p&gt;Here is the script used for testing, thanks to &lt;a href=&#34;http://andyjeffries.co.uk/articles/dtrace-and-ruby-on-rails-with-
leopard-snow-leopard&#34;&gt;this
article&lt;/a&gt; and &lt;a href=&#34;http://tenderlovemaking.com/2011/12/05/profiling-rails-startup-with-
dtrace/&#34;&gt;this
article&lt;/a&gt;, the script used here is based on their version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/sbin/dtrace -s

#pragma D option quiet

BEGIN
{
    printf(&amp;quot;==========================\n&amp;quot;);
    printf(&amp;quot;Trace started: %Y\n&amp;quot;, walltimestamp);
    printf(&amp;quot;==========================\n&amp;quot;);
    depth = 0;
}

ruby*:::function-entry
{
    k = copyinstr(arg0);
    m = copyinstr(arg1);
    @[k, m] = count();
    self-&amp;gt;depth++;
    self-&amp;gt;start[k, m, self-&amp;gt;depth] = timestamp;
    printf(&amp;quot;-&amp;gt; %s::%s (%s:%d)\n&amp;quot;, k, m, copyinstr(arg2), arg3);
}

tick-5000hz
/k != 0/
{
      @[k, m] = count();
}

ruby*:::function-return
/(this-&amp;gt;class = copyinstr(arg0)) != NULL &amp;amp;&amp;amp; \
 (this-&amp;gt;func  = copyinstr(arg1)) != NULL &amp;amp;&amp;amp; \
 self-&amp;gt;start[this-&amp;gt;class, this-&amp;gt;func, self-&amp;gt;depth]/
{
    this-&amp;gt;elapsed = timestamp - self-&amp;gt;start[this-&amp;gt;class, this-&amp;gt;func, self-&amp;gt;depth];

    this-&amp;gt;file = copyinstr(arg2);
    this-&amp;gt;line = arg3;
    @num[this-&amp;gt;file, this-&amp;gt;line] = count();
    @eavg[this-&amp;gt;file, this-&amp;gt;line] = avg(this-&amp;gt;elapsed);
    @esum[this-&amp;gt;file, this-&amp;gt;line] = sum(this-&amp;gt;elapsed);

    self-&amp;gt;start[this-&amp;gt;class, this-&amp;gt;func, self-&amp;gt;depth] = 0;
    self-&amp;gt;depth--;
}

END
{
    printf(&amp;quot;==========================\n&amp;quot;);
    printf(&amp;quot;Trace ended: %Y\n&amp;quot;, walltimestamp);
    printf(&amp;quot;==========================\n&amp;quot;);
    normalize(@eavg, 1000);
    normalize(@esum, 1000);
    setopt(&amp;quot;aggsortpos&amp;quot;, &amp;quot;2&amp;quot;);
    printf(&amp;quot;%-33s %123s\n&amp;quot;, &amp;quot;___ OVERLAP TIMES: ___&amp;quot;,
            &amp;quot;______ ELAPSED _____&amp;quot;);
    printf(&amp;quot;%-120s %5s %6s %10s %12s\n&amp;quot;, &amp;quot;FILE&amp;quot;, &amp;quot;LINE&amp;quot;,
            &amp;quot;COUNT&amp;quot;, &amp;quot;AVG(us)&amp;quot;, &amp;quot;SUM(us)&amp;quot;);
    printa(&amp;quot;%-120.120s %5d %@6d %@10d %@12d\n&amp;quot;, @num, @eavg, @esum);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Probes primely used in the script is &lt;code&gt;function-entry&lt;/code&gt; and &lt;code&gt;function-return&lt;/code&gt;,
and the action inside the probe is to calculate the elapsed time. And some
summary information will be printed after trace end.&lt;/p&gt;

&lt;h3 id=&#34;probes-for-database-operations&#34;&gt;Probes for database operations&lt;/h3&gt;

&lt;p&gt;The performance test is also needed on Database server, MySQL has provide one
method to use DTrace to the database, please refer &lt;a href=&#34;http://dev.mysql.com/tech-
resources/articles/getting_started_dtrace_saha.html&#34;&gt;this
page&lt;/a&gt; for reference. Here is
the script used for tracing MySQL database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/sbin/dtrace -s

#pragma D option quiet

BEGIN
{
    printf(&amp;quot;==========================\n&amp;quot;);
    printf(&amp;quot;Trace started: %Y\n&amp;quot;, walltimestamp);
    printf(&amp;quot;==========================\n&amp;quot;);
    depth = 0;
}

pid$target::*mysql_parse*:entry
{
    self-&amp;gt;query = copyinstr(arg1);
}

mysql*:::query-start
{
    self-&amp;gt;query = copyinstr(arg0);
    self-&amp;gt;connid = arg1;
    self-&amp;gt;db = copyinstr(arg2);
    self-&amp;gt;who = strjoin(copyinstr(arg3),strjoin(&amp;quot;@&amp;quot;,copyinstr(arg4)));
    self-&amp;gt;start = timestamp;
}

mysql*:::query-done
/ self-&amp;gt;start /
{
    this-&amp;gt;elapsed = timestamp - self-&amp;gt;start;
    @time[self-&amp;gt;query] = quantize(this-&amp;gt;elapsed);
    printf(&amp;quot;%-20s %-20s %-40s %-9d\n&amp;quot;, self-&amp;gt;who, self-&amp;gt;db, self-&amp;gt;query, this-&amp;gt;elapsed / 1000000);
    self-&amp;gt;query = 0;
    self-&amp;gt;start = 0;
}


END
{
    printf(&amp;quot;==========================\n&amp;quot;);
    printf(&amp;quot;Trace ended: %Y\n&amp;quot;, walltimestamp);
    printf(&amp;quot;==========================\n&amp;quot;);

    printf(&amp;quot;MySQL query execution latency (ns):\n&amp;quot;);
    printa(@time);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script will print out time consumed by query command. There are some more
detailed probe, which can be used to monitor the time consumbed by each type
of command, please check the document if more information is needed.&lt;/p&gt;

&lt;h3 id=&#34;result-analysis&#34;&gt;Result analysis&lt;/h3&gt;

&lt;p&gt;The output is different from the two script listed above. In the log message
of Ruby, the filename and line number information are saved, which can be used
to locate the bottle neck. While the MySQL probe is easy to use, after
separating the command type, the performance can be optimized.&lt;/p&gt;

&lt;p&gt;The testing data is still under development, and I will update the blog after
get the result.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tenderlovemaking.com/2011/12/05/profiling-rails-startup-with-dtrace/&#34;&gt;http://tenderlovemaking.com/2011/12/05/profiling-rails-startup-with-dtrace/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.oreilly.com/rails2008/public/schedule/detail/1945&#34;&gt;http://en.oreilly.com/rails2008/public/schedule/detail/1945&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/cd/E19253-01/819-5488/gcfgt/index.html&#34;&gt;http://docs.oracle.com/cd/E19253-01/819-5488/gcfgt/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tablespace.net/quicksheet/dtrace-quickstart.html&#34;&gt;http://www.tablespace.net/quicksheet/dtrace-quickstart.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.princeton.edu/~unix/Solaris/troubleshoot/dtrace.html&#34;&gt;http://www.princeton.edu/~unix/Solaris/troubleshoot/dtrace.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.mysql.com/tech-resources/articles/getting_started_dtrace_saha.html&#34;&gt;http://dev.mysql.com/tech-resources/articles/getting_started_dtrace_saha.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=mRf4bpEtI6I&#34;&gt;http://www.youtube.com/watch?v=mRf4bpEtI6I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andyjeffries.co.uk/articles/dtrace-and-ruby-on-rails-with-leopard-snow-leopard&#34;&gt;http://andyjeffries.co.uk/articles/dtrace-and-ruby-on-rails-with-leopard-snow-leopard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.mysql.com/tech-resources/articles/getting_started_dtrace_saha.html&#34;&gt;http://dev.mysql.com/tech-resources/articles/getting_started_dtrace_saha.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>