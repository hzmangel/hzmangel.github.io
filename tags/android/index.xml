<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 湖间小筑</title>
    <link>http://hzmangel.github.io/tags/android/</link>
    <description>Recent content in Android on 湖间小筑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright - ©2015 - hzmangel</copyright>
    <lastBuildDate>Mon, 14 Sep 2009 22:59:50 +0000</lastBuildDate>
    <atom:link href="http://hzmangel.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android中使用自定义Adapter</title>
      <link>http://hzmangel.github.io/post/461/</link>
      <pubDate>Mon, 14 Sep 2009 22:59:50 +0000</pubDate>
      
      <guid>http://hzmangel.github.io/post/461/</guid>
      <description>&lt;p&gt;算是对这段折腾android的一次小结吧，呵呵。&lt;/p&gt;

&lt;p&gt;一个很简单的界面，上面留块地方放logo或者banner，然后下面放个东西来显示数据。试验中上面使用的是TextView，下面是ListView。对于Lis
tView，当然需要使用Adapter来显示数据啦，但默认的Adapter满足不了需要，因为我的那个一条需要显示的东西不是那么标准，所以折腾了几天，自己弄出
来了一个fooAdapter，顺便还有这篇文章。首先是最简单的框架，一个布局的xml文件，然后一个主程序，在其中实现一个继承于Activity的类，在类中的onCreate()方法中把布局给画出来。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Cover extends Activity {
    /** Called when the activity is first created. */
    @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.cover);
            ListView lv = (ListView) findViewById(R.id.summary);
            fooAdapter adapter = new fooAdapter(this);
            lv.setAdapter(adapter);
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来就是cover.xml的layout文件，很简单的一个东西，里面就一个TextView用来放东西，一个ListView用来和fooAdapter绑定。&lt;/p&gt;

&lt;p&gt;下面就开始编写fooAdapter这个类了，先新建一个类，继承于BaseAdapter，然后把getCount/getItem/getItemId/getV
iew这几个架子搭好，用eclipse+ADT的方式开发的话可以自动生成，默认生成的东西不可用。在fooAdapter中加上一个数据源，然后就可以去完善这些
方法了。我用的数据源是个很简单的String[]，同时在类中还加上了一个Context类型的变量_ctx，此变量将在ctor时被赋值（所以还加了一个ctor
，呵呵）。架子搭好了就可以填东西了，先放个简单的TextView吧，这里对getView做修改就可以了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class fooAdapter extends BaseAdapter {
    private Context _ctx = null;
    private String[] _data = { &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;foobar&amp;quot;, &amp;quot;barfoo&amp;quot; };
    public fooAdapter(Context context) {
        _ctx = context;
    }
    @Override
    public int getCount() {
        return _data.length;
    }
    @Override
    public Object getItem(int position) {
        return position;
    }
    @Override
    public long getItemId(int position) {
        return position;
    }
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        TextView tv = null;
        if (null == convertView) {
            tv = new TextView(_ctx);
            Log.v(&amp;quot;huzim&amp;quot;, &amp;quot;Pos1 is &amp;quot; + position);
        } else {
            tv = (TextView) convertView;
        }
        tv.setText(_data[position]);
        return tv;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下一步折腾多一些东西，每次调用getView会返回一个LinearLayout，里面包含有两个TextView。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public View getView(int position, View convertView, ViewGroup parent) {
    LinearLayout lay = null;
    // Set the sub-views to be displayed
    TextView tv_l = new TextView(_ctx);
    TextView tv_r = new TextView(_ctx);
    tv_l.setText(&amp;quot;* &amp;quot;);
    tv_r.setText(_data[position]);
    tv_r.setGravity(Gravity.RIGHT);
    if (null == convertView) {
        lay = new LinearLayout(_ctx);
        lay.addView(tv_l);
        lay.addView(tv_r);
    } else {
        lay = (LinearLayout) convertView;
    }
    return lay;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，差不多满足我的一个东西，每次返回一个TableLayout，暂时里面只有两列。用TableLayout是因为有些列可能需要右对齐，好像在TextVie
w里面做不了。有一点需要注意的就是，在TableLayout中如果要设置右对齐的话，一定需要给对应列设置ColumnStretchable属性，要不然内容不
会展开。昨天晚上折腾了好久才在&lt;a href=&#34;http://developerlife.com/tutorials/?p=307&#34;&gt;这个页面&lt;/a&gt;上看到的解决方法，上面还详细
说了TableLayout几个属性的差别，推荐细看。最后这个getView是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public View getView(int position, View convertView, ViewGroup parent) {
    TableLayout lay = null;
    // Set the sub-views to be displayed
    TableRow tr = new TableRow(_ctx);
    TextView tv_l = new TextView(_ctx);
    TextView tv_r = new TextView(_ctx);
    tv_l.setText(&amp;quot;* &amp;quot;);
    tv_r.setText(_data[position]);
    tv_r.setGravity(Gravity.RIGHT);
    tv_r.setLayoutParams(new TableRow.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
    tr.addView(tv_l);
    tr.addView(tv_r, new TableRow.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
    if (null == convertView) {
        lay = new TableLayout(_ctx);
        lay.addView(tr);
    } else {
        lay = (TableLayout) convertView;
    }
    lay.setColumnStretchable(1, true);
    return lay;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;呵呵，差不多就这些了吧，加上了一个自定义的Adapter，可以按自己的意愿让伊显示，满好 :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>