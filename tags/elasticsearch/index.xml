<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elasticsearch on 湖间小筑</title>
    <link>http://hzmangel.github.io/tags/elasticsearch/</link>
    <description>Recent content in Elasticsearch on 湖间小筑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright - ©2015 - hzmangel</copyright>
    <lastBuildDate>Tue, 23 Feb 2016 00:52:42 +0800</lastBuildDate>
    <atom:link href="http://hzmangel.github.io/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Integrate Rails with Elasticsearch - Indexing
</title>
      <link>http://hzmangel.github.io/post/rails_elasticsearch_indexing/</link>
      <pubDate>Tue, 23 Feb 2016 00:52:42 +0800</pubDate>
      
      <guid>http://hzmangel.github.io/post/rails_elasticsearch_indexing/</guid>
      <description>

&lt;p&gt;之前写Rails在查找这块一般都是用DB内置的查询，不过上次试了下用 Elasticsearch ，比之前想像的要简单，记点东西在这吧。&lt;/p&gt;

&lt;p&gt;这篇东西会包含下面几项内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装 Elasticsearch&lt;/li&gt;
&lt;li&gt;关联 Rails 与 Elasticsearch&lt;/li&gt;
&lt;li&gt;配置索引内容&lt;/li&gt;
&lt;li&gt;Custom Analyzer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文没有完整系统的介绍，更多的只是一些使用技巧。详细说明请参见[官方文档]()。&lt;/p&gt;

&lt;h2 id=&#34;安装elasticsearch&#34;&gt;安装Elasticsearch&lt;/h2&gt;

&lt;p&gt;两种方法，从官网下编译好的&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html&#34;&gt;二进制解压&lt;/a&gt;，或者用&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/setup-repositories.html&#34;&gt;操作系统的安装源&lt;/a&gt;。如果是OSX，可以使用 &lt;em&gt;homebrew&lt;/em&gt; 安装，命令为 &lt;code&gt;brew install elasticsearch&lt;/code&gt; ，安装后的启动可以使用 &lt;code&gt;brew info elasticsearch&lt;/code&gt; 查看。&lt;/p&gt;

&lt;p&gt;安装并启动服务后，可以用下面的命令查看系统是否成功启动：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -X GET &#39;http://localhost:9200&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一切正常，会返回服务器的状态信息。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;关联-rails-与-elasticsearch&#34;&gt;关联 Rails 与 Elasticsearch&lt;/h2&gt;

&lt;h3 id=&#34;gem&#34;&gt;Gem&lt;/h3&gt;

&lt;p&gt;Elasticsearch提供了两个Gem用于和Rails集成，分别是 &lt;a href=&#34;https://github.com/elastic/elasticsearch-rails&#34;&gt;&lt;em&gt;elasticsearch-rails&lt;/em&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/elastic/elasticsearch-rails/tree/master/elasticsearch-model&#34;&gt;&lt;em&gt;elasticsearch-model&lt;/em&gt;&lt;/a&gt; 。其中， &lt;em&gt;elasticsearch-rails&lt;/em&gt; 为 Rails 的模块加入了 Elasticsearch 的功能，而 &lt;em&gt;elasticsearch-model&lt;/em&gt; 则为 Ruby 的类提供了一些简化的连接 &lt;em&gt;Elasticsearch&lt;/em&gt; 的方法，使得相应的类可以通过 &lt;code&gt;__elasticsearch__&lt;/code&gt; 直接访问 &lt;em&gt;Elasticsearch&lt;/em&gt; 服务器的资源。&lt;/p&gt;

&lt;h3 id=&#34;model-enable-indexes-in-elasticsearch&#34;&gt;Model - Enable indexes in Elasticsearch&lt;/h3&gt;

&lt;p&gt;由于 Elasticsearch 是一个单独的服务器，所以在使用前需要考虑以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有哪些Model需要被索引&lt;/li&gt;
&lt;li&gt;每个Model有哪些字段需要被索引&lt;/li&gt;
&lt;li&gt;如何在数据库中记录更新后同步 Elasticsearch 的索引&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果不使用 Elasticsearch 提供的 gem，需要手动去完成上面的几个步骤，但是上面提到的两个 gem 提供了一系列方便使用的函数。代码的东西对着说比较好弄，所以这里有一个 [Demo Project]()，对着来说吧。&lt;/p&gt;

&lt;p&gt;这个app就是一个简单的blog，由于只是为了介绍 Elasticsearch ，所以只引入了最简单的部分。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;app/models/blog.rb&lt;/code&gt; 中可以看到，需要索引一个 model 需要三步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在代码中加入 Elasticsearch 的模块。&lt;/li&gt;
&lt;li&gt;设置需要索引的模块。&lt;/li&gt;
&lt;li&gt;导入数据至 Elasticsearch 。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于需要索引的Model，只需要在代码中加上几行即可以调用 Elasticsearch 的功能。可以在 &lt;code&gt;app/models/blog.rb&lt;/code&gt; 中看到下面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;elasticsearch/model&#39;

class Blog &amp;lt; ActiveRecord::Base
  include Elasticsearch::Model
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在加入了这几行代码后，这个Model就可以通过 &lt;code&gt;__elasticsearch__&lt;/code&gt; 来调用Elasticsearch的API了。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Blog.__elasticsearch__.client.cluster.health
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，只是在Blog中导入了一些Elasticsearch相关的配置，但是还没有将具体的数据导入到Elasticsearch服务器中。可以使用下面的命令导入数据：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Blog.import force: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者逐步完成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Blog.__elasticsearch__.create_index! force: true
Blog.__elasticsearch__.refresh_index!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是由于 Elasticsearch 的索引是和model分开存放的，所以在每次数据有更新时，需要手动更新所更新文档的索引。如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Blog.first.__elasticsearch__.index_document
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过Elasticsearch提供了Callback的方式来处理这些操作，只需要在Model中加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;include Elasticsearch::Model::Callbacks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可在每次数据有更新时，自动更新索引。在Gem的文档中还有一些更详细的用法，如异步索引，自定义索引等供查阅。&lt;/p&gt;

&lt;p&gt;在数据导入完成后即可尝试在 Elasticsearch 查找导入的数据了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Blog.search(&#39;*&#39;).records.records
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;model-choose-indexed-fields&#34;&gt;Model - Choose indexed fields&lt;/h3&gt;

&lt;p&gt;默认情况下，所有字段都会被加入 Elasticsearch 的索引。但是在实际使用情况中，可能会碰到只索引某些数据的场景。 Elasticsearch 提供了一个函数用来指定需要索引的字段以及对应的值。函数的名称是 &lt;code&gt;as_indexed_json&lt;/code&gt; 。这个函数是在 &lt;code&gt;Elasticsearch::Model::Serializing&lt;/code&gt; 定义的，如果需要定制，直接在Model中重新定义自己的函数就好。如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;elasticsearch/model&#39;

class Blog &amp;lt; ActiveRecord::Base
  include Elasticsearch::Model

  def as_indexed_json(options = {})
    as_json(
      only: [:title, :content]
    )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的例子中，无论我的Blog记录中还有什么字段，只有 &lt;em&gt;title&lt;/em&gt; 和 &lt;em&gt;content&lt;/em&gt; 字段会被放入 Elasticsearch 的索引中，也只有这两个字段会返回在查询的结果中。除了内置字段外，还支持将函数中方法的返回值也加入索引中，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;elasticsearch/model&#39;

class Blog &amp;lt; ActiveRecord::Base
  include Elasticsearch::Model

  def as_indexed_json(options = {})
    as_json(
      only: [:title, :content],
      methods: [:author_name, :tag_count],
    )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时在索引的字段和返回的结果中，会多出 &lt;em&gt;author_name&lt;/em&gt; 以及 &lt;em&gt;tag_count&lt;/em&gt; 的返回值。这种方式可以指定关联记录的索引信息。除此之外，还可以在 &lt;code&gt;include&lt;/code&gt; 中使用嵌套的字段来标明关系记录。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;elasticsearch/model&#39;

class Blog &amp;lt; ActiveRecord::Base
  include Elasticsearch::Model

  def as_indexed_json(options = {})
    as_json(
      only: [:title, :content],
      include: { author: {only: :name}, tag: {methods: [:count]} }
    )
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，基本的索引构建应该差不多了，在调用过 &lt;em&gt;import&lt;/em&gt; 后，就可以用基本的查询功能去查找了。&lt;/p&gt;

&lt;h2 id=&#34;analyzer-和-mapping&#34;&gt;&lt;em&gt;Analyzer&lt;/em&gt; 和 &lt;em&gt;Mapping&lt;/em&gt;&lt;/h2&gt;

&lt;h3 id=&#34;analyzer&#34;&gt;&lt;em&gt;Analyzer&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;对每一条被索引的内容， ES 都会通过 &lt;em&gt;Analyzer&lt;/em&gt; 把内容分词后放入服务器（因为ES中是使用 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95&#34;&gt;反向索引&lt;/a&gt; 来查找的，而反向索引的 &lt;em&gt;token&lt;/em&gt; 就是输入文字经过 &lt;em&gt;Analyzer&lt;/em&gt; 处理的结果）。而在查询时，如果是全文检索，那么 ES 会将和分析内容时使用的相同的 &lt;em&gt;Analyzer&lt;/em&gt; 应用于检索词上，并将分词后的检索词用于查找以提高查找的准确性。而如果查询的类型是精确匹配， ES 将不会处理检索词。&lt;/p&gt;

&lt;p&gt;根据 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/guide/current/analysis-intro.html&#34;&gt;文档&lt;/a&gt; 的介绍，每一个 &lt;em&gt;Analyzer&lt;/em&gt; 由 &lt;strong&gt;3&lt;/strong&gt; 步组成，分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Character filters&lt;/em&gt; : 对输入的内容按字符处理，包含有 &lt;em&gt;Mapping Char Filter&lt;/em&gt;, &lt;em&gt;HTML Strip Char Filter&lt;/em&gt; 和 &lt;em&gt;Pattern Replace Char Filter&lt;/em&gt; ，具体介绍请参阅 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Tokenizer&lt;/em&gt; : 分词器，根据不同的规则，将输入内容分为不同的 token ，&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Token filters&lt;/em&gt; : 应用于上面分割开的 &lt;em&gt;token&lt;/em&gt; 上的 filter。 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ES 还提供了一些内置的 &lt;em&gt;Analyzer&lt;/em&gt; ，可以在 &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html&#34;&gt;这里&lt;/a&gt; 查到。由于 Rails 中的代码实例会牵涉到 &lt;em&gt;Mapping&lt;/em&gt; 相关的内容，所以会在下一节中贴代码。&lt;/p&gt;

&lt;h3 id=&#34;mapping&#34;&gt;&lt;em&gt;Mapping&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;对于输入的文本内容，ES会默认将此字段映射为 &lt;em&gt;string&lt;/em&gt; 类型，并使用 &lt;em&gt;standard analyzer&lt;/em&gt; ，如果需要一些特殊处理，就需要引入 &lt;em&gt;Mapping&lt;/em&gt; 了。 &lt;em&gt;Mapping&lt;/em&gt; 的作用是告诉 ES 某个字段需要按什么样的规则处理。例如一个手机号， ES 的默认处理是按长整形，但是可能需要按字符串处理，这时就需要指定 &lt;em&gt;Mapping&lt;/em&gt; 了。&lt;/p&gt;

&lt;p&gt;在 Rails 的 Model 中，可以通过下面的方法来设置字段的 &lt;em&gt;Analyzer&lt;/em&gt; 和 &lt;em&gt;Mapping Type&lt;/em&gt; ，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;settings do
  mappings do
    indexes :title, analyzer: &#39;english&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上述的例子中，原本 &lt;em&gt;title&lt;/em&gt; 字段的 &lt;em&gt;analyzer&lt;/em&gt; 被指定为 &lt;em&gt;english&lt;/em&gt; 而不是默认的 &lt;em&gt;string&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;Q: 为什么设定了type后，import返回值为1，而不设的时候返回是0？&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>